<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<context:component-scan base-package="com"
		annotation-config="true" />

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="order" value="2" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="locations">
			<list>
				<value>classpath:/conf/db/datasource.properties</value>
			</list>
		</property>
		<property name="fileEncoding" value="utf-8" />
	</bean>

	<!-- 配置数据源 dataSourceA -->
	<bean name="postgres_db" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${pg.url}" />
		<property name="username" value="${pg.username}" />
		<property name="password" value="${pg.password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="20" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="500" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="1000" />

		<!-- 监控数据库 -->
		<!--<property name="filters" value="stat,log4j"/> -->
		<property name="filters" value="stat" />
	</bean>


	<bean id="mysql_db" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${db.driverClassName}" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<!-- 连接池启动时的初始值 -->
		<property name="initialSize" value="${db.initialSize}" />
		<!-- 连接池的最大值 -->
		<property name="maxActive" value="${db.maxActive}" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="maxIdle" value="${db.maxIdle}" />
		<!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="${db.minIdle}" />
		<!-- 最大建立连接等待时间。如果超过此时间将接到异常。设为－1表示无限制 -->
		<property name="maxWait" value="${db.maxWait}" />
		<!--#给出一条简单的sql语句进行验证 -->
		<!--<property name="validationQuery" value="select getdate()" /> -->
		<property name="defaultAutoCommit" value="${db.defaultAutoCommit}" />
		<!-- 回收被遗弃的（一般是忘了释放的）数据库连接到连接池中 -->
		<!--<property name="removeAbandoned" value="true" /> -->
		<!-- 数据库连接过多长时间不用将被视为被遗弃而收回连接池中 -->
		<!--<property name="removeAbandonedTimeout" value="120" /> -->
		<!-- #连接的超时时间，默认为半小时。 -->
		<property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}" />

		<!--# 失效检查线程运行时间间隔，要小于MySQL默认 -->
		<property name="timeBetweenEvictionRunsMillis" value="40000" />
		<!--# 检查连接是否有效 -->
		<property name="testWhileIdle" value="true" />
		<!--# 检查连接有效性的SQL语句 -->
		<property name="validationQuery" value="SELECT 1 FROM dual" />
	</bean>

	<!-- 设置数据源 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath*:com/**/dao/*Mapper.xml"></property>
		<property name="configLocation" value="classpath:conf/mybatis/mybatis-config.xml" />
	</bean>
	
	<!-- 自定义数据源切换 -->
	<bean id="dataSource" class="com.common.DynamicDataSourceChoose">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="postgres_db" value-ref="postgres_db" />
				<entry key="mysql_db" value-ref="mysql_db" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="mysql_db" />
	</bean>

	<bean name="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.**.dao" />
	</bean>

	<!-- 使用@Transactional进行声明式事务管理需要声明下面这行 注意：proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。如果proxy-target-class 
		属性值被设置为true， 那么基于类的代理将起作用（这时需要cglib库）。如果proxy-target-class属值被设置为false或者这个属性被省略，那么标准的JDK 
		基于接口的代理将起作用。 即使你未声明 proxy-target-class="true" ，但运行类没有继承接口，spring也会自动使用CGLIB代理。 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="false" />
	<!-- 事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
		<property name="rollbackOnCommitFailure" value="true" />
	</bean>

</beans>